// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.netease.yunxin.flutter.plugins.neliveplayer.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NeLiveConfig {
    private @Nullable Boolean isCloseTimeOutProtect;

    public @Nullable Boolean getIsCloseTimeOutProtect() {
      return isCloseTimeOutProtect;
    }

    public void setIsCloseTimeOutProtect(@Nullable Boolean setterArg) {
      this.isCloseTimeOutProtect = setterArg;
    }

    private @Nullable Long refreshPreLoadDuration;

    public @Nullable Long getRefreshPreLoadDuration() {
      return refreshPreLoadDuration;
    }

    public void setRefreshPreLoadDuration(@Nullable Long setterArg) {
      this.refreshPreLoadDuration = setterArg;
    }

    private @Nullable String thirdUserId;

    public @Nullable String getThirdUserId() {
      return thirdUserId;
    }

    public void setThirdUserId(@Nullable String setterArg) {
      this.thirdUserId = setterArg;
    }

    public static class Builder {
      private @Nullable Boolean isCloseTimeOutProtect;

      public @NonNull Builder setIsCloseTimeOutProtect(@Nullable Boolean setterArg) {
        this.isCloseTimeOutProtect = setterArg;
        return this;
      }

      private @Nullable Long refreshPreLoadDuration;

      public @NonNull Builder setRefreshPreLoadDuration(@Nullable Long setterArg) {
        this.refreshPreLoadDuration = setterArg;
        return this;
      }

      private @Nullable String thirdUserId;

      public @NonNull Builder setThirdUserId(@Nullable String setterArg) {
        this.thirdUserId = setterArg;
        return this;
      }

      public @NonNull NeLiveConfig build() {
        NeLiveConfig pigeonReturn = new NeLiveConfig();
        pigeonReturn.setIsCloseTimeOutProtect(isCloseTimeOutProtect);
        pigeonReturn.setRefreshPreLoadDuration(refreshPreLoadDuration);
        pigeonReturn.setThirdUserId(thirdUserId);
        return pigeonReturn;
      }
    }

    @NonNull
    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isCloseTimeOutProtect", isCloseTimeOutProtect);
      toMapResult.put("refreshPreLoadDuration", refreshPreLoadDuration);
      toMapResult.put("thirdUserId", thirdUserId);
      return toMapResult;
    }

    static @NonNull NeLiveConfig fromMap(@NonNull Map<String, Object> map) {
      NeLiveConfig pigeonResult = new NeLiveConfig();
      Object isCloseTimeOutProtect = map.get("isCloseTimeOutProtect");
      pigeonResult.setIsCloseTimeOutProtect((Boolean) isCloseTimeOutProtect);
      Object refreshPreLoadDuration = map.get("refreshPreLoadDuration");
      pigeonResult.setRefreshPreLoadDuration(
          (refreshPreLoadDuration == null)
              ? null
              : ((refreshPreLoadDuration instanceof Integer)
                  ? (Integer) refreshPreLoadDuration
                  : (Long) refreshPreLoadDuration));
      Object thirdUserId = map.get("thirdUserId");
      pigeonResult.setThirdUserId((String) thirdUserId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NEAutoRetryConfig {
    private @Nullable Long count;

    public @Nullable Long getCount() {
      return count;
    }

    public void setCount(@Nullable Long setterArg) {
      this.count = setterArg;
    }

    private @Nullable Long delayDefault;

    public @Nullable Long getDelayDefault() {
      return delayDefault;
    }

    public void setDelayDefault(@Nullable Long setterArg) {
      this.delayDefault = setterArg;
    }

    private @Nullable List<Long> delayArray;

    public @Nullable List<Long> getDelayArray() {
      return delayArray;
    }

    public void setDelayArray(@Nullable List<Long> setterArg) {
      this.delayArray = setterArg;
    }

    public static class Builder {
      private @Nullable Long count;

      public @NonNull Builder setCount(@Nullable Long setterArg) {
        this.count = setterArg;
        return this;
      }

      private @Nullable Long delayDefault;

      public @NonNull Builder setDelayDefault(@Nullable Long setterArg) {
        this.delayDefault = setterArg;
        return this;
      }

      private @Nullable List<Long> delayArray;

      public @NonNull Builder setDelayArray(@Nullable List<Long> setterArg) {
        this.delayArray = setterArg;
        return this;
      }

      public @NonNull NEAutoRetryConfig build() {
        NEAutoRetryConfig pigeonReturn = new NEAutoRetryConfig();
        pigeonReturn.setCount(count);
        pigeonReturn.setDelayDefault(delayDefault);
        pigeonReturn.setDelayArray(delayArray);
        return pigeonReturn;
      }
    }

    @NonNull
    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("count", count);
      toMapResult.put("delayDefault", delayDefault);
      toMapResult.put("delayArray", delayArray);
      return toMapResult;
    }

    static @NonNull NEAutoRetryConfig fromMap(@NonNull Map<String, Object> map) {
      NEAutoRetryConfig pigeonResult = new NEAutoRetryConfig();
      Object count = map.get("count");
      pigeonResult.setCount(
          (count == null) ? null : ((count instanceof Integer) ? (Integer) count : (Long) count));
      Object delayDefault = map.get("delayDefault");
      pigeonResult.setDelayDefault(
          (delayDefault == null)
              ? null
              : ((delayDefault instanceof Integer) ? (Integer) delayDefault : (Long) delayDefault));
      Object delayArray = map.get("delayArray");
      pigeonResult.setDelayArray((List<Long>) delayArray);
      return pigeonResult;
    }
  }

  private static class NeLivePlayerApiCodec extends StandardMessageCodec {
    public static final NeLivePlayerApiCodec INSTANCE = new NeLivePlayerApiCodec();

    private NeLivePlayerApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return NEAutoRetryConfig.fromMap((Map<String, Object>) readValue(buffer));

        case (byte) 129:
          return NeLiveConfig.fromMap((Map<String, Object>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value) {
      if (value instanceof NEAutoRetryConfig) {
        stream.write(128);
        writeValue(stream, ((NEAutoRetryConfig) value).toMap());
      } else if (value instanceof NeLiveConfig) {
        stream.write(129);
        writeValue(stream, ((NeLiveConfig) value).toMap());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NeLivePlayerApi {
    @NonNull
    void initAndroid(NeLiveConfig config);

    @NonNull
    String create();

    @NonNull
    void release(String playerId);

    @NonNull
    void setShouldAutoplay(String playerId, Boolean isAutoplay);

    @NonNull
    Boolean setPlayUrl(String playerId, String path);

    @NonNull
    void prepareAsync(String playerId);

    @NonNull
    void start(String playerId);

    @NonNull
    void stop(String playerId);

    @NonNull
    Long getCurrentPosition(String playerId);

    @NonNull
    void switchContentUrl(String playerId, String url);

    @NonNull
    String getVersion();

    @NonNull
    void addPreloadUrls(List<String> urls);

    @NonNull
    void removePreloadUrls(List<String> urls);

    @NonNull
    Map<String, Long> queryPreloadUrls();

    @NonNull
    void setBufferStrategy(String playerId, Long bufferStrategy);

    @NonNull
    void setHardwareDecoder(String playerId, Boolean isOpen);

    @NonNull
    void setPlaybackTimeout(String playerId, Long timeout);

    @NonNull
    void setAutoRetryConfig(String playerId, NEAutoRetryConfig config);

    @NonNull
    void setMute(String playerId, Boolean isMute);

    @NonNull
    void setVolume(String playerId, Double volume);

    @NonNull
    void setPreloadResultValidityIos(Long validity);

    /** The codec used by NeLivePlayerApi. */
    static MessageCodec<Object> getCodec() {
      return NeLivePlayerApiCodec.INSTANCE;
    }

    /**
     * Sets up an instance of `NeLivePlayerApi` to handle messages through the `binaryMessenger`.
     */
    static void setup(BinaryMessenger binaryMessenger, NeLivePlayerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.initAndroid", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  NeLiveConfig configArg = (NeLiveConfig) args.get(0);
                  if (configArg == null) {
                    throw new NullPointerException("configArg unexpectedly null.");
                  }
                  api.initAndroid(configArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  String output = api.create();
                  wrapped.put("result", output);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.release", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  api.release(playerIdArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.setShouldAutoplay",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Boolean isAutoplayArg = (Boolean) args.get(1);
                  if (isAutoplayArg == null) {
                    throw new NullPointerException("isAutoplayArg unexpectedly null.");
                  }
                  api.setShouldAutoplay(playerIdArg, isAutoplayArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.setPlayUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  String pathArg = (String) args.get(1);
                  if (pathArg == null) {
                    throw new NullPointerException("pathArg unexpectedly null.");
                  }
                  Boolean output = api.setPlayUrl(playerIdArg, pathArg);
                  wrapped.put("result", output);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.prepareAsync", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  api.prepareAsync(playerIdArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.start", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  api.start(playerIdArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  api.stop(playerIdArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.getCurrentPosition",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Long output = api.getCurrentPosition(playerIdArg);
                  wrapped.put("result", output);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.switchContentUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  String urlArg = (String) args.get(1);
                  if (urlArg == null) {
                    throw new NullPointerException("urlArg unexpectedly null.");
                  }
                  api.switchContentUrl(playerIdArg, urlArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.getVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  String output = api.getVersion();
                  wrapped.put("result", output);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.addPreloadUrls", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  List<String> urlsArg = (List<String>) args.get(0);
                  if (urlsArg == null) {
                    throw new NullPointerException("urlsArg unexpectedly null.");
                  }
                  api.addPreloadUrls(urlsArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.removePreloadUrls",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  List<String> urlsArg = (List<String>) args.get(0);
                  if (urlsArg == null) {
                    throw new NullPointerException("urlsArg unexpectedly null.");
                  }
                  api.removePreloadUrls(urlsArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.queryPreloadUrls", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  Map<String, Long> output = api.queryPreloadUrls();
                  wrapped.put("result", output);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.setBufferStrategy",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Number bufferStrategyArg = (Number) args.get(1);
                  if (bufferStrategyArg == null) {
                    throw new NullPointerException("bufferStrategyArg unexpectedly null.");
                  }
                  api.setBufferStrategy(playerIdArg, bufferStrategyArg.longValue());
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.setHardwareDecoder",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Boolean isOpenArg = (Boolean) args.get(1);
                  if (isOpenArg == null) {
                    throw new NullPointerException("isOpenArg unexpectedly null.");
                  }
                  api.setHardwareDecoder(playerIdArg, isOpenArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.setPlaybackTimeout",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Number timeoutArg = (Number) args.get(1);
                  if (timeoutArg == null) {
                    throw new NullPointerException("timeoutArg unexpectedly null.");
                  }
                  api.setPlaybackTimeout(playerIdArg, timeoutArg.longValue());
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.setAutoRetryConfig",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  NEAutoRetryConfig configArg = (NEAutoRetryConfig) args.get(1);
                  if (configArg == null) {
                    throw new NullPointerException("configArg unexpectedly null.");
                  }
                  api.setAutoRetryConfig(playerIdArg, configArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.setMute", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Boolean isMuteArg = (Boolean) args.get(1);
                  if (isMuteArg == null) {
                    throw new NullPointerException("isMuteArg unexpectedly null.");
                  }
                  api.setMute(playerIdArg, isMuteArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NeLivePlayerApi.setVolume", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Double volumeArg = (Double) args.get(1);
                  if (volumeArg == null) {
                    throw new NullPointerException("volumeArg unexpectedly null.");
                  }
                  api.setVolume(playerIdArg, volumeArg);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NeLivePlayerApi.setPreloadResultValidityIos",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  Number validityArg = (Number) args.get(0);
                  if (validityArg == null) {
                    throw new NullPointerException("validityArg unexpectedly null.");
                  }
                  api.setPreloadResultValidityIos(validityArg.longValue());
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class NeLivePlayerListenerApiCodec extends StandardMessageCodec {
    public static final NeLivePlayerListenerApiCodec INSTANCE = new NeLivePlayerListenerApiCodec();

    private NeLivePlayerListenerApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class NeLivePlayerListenerApi {
    private final BinaryMessenger binaryMessenger;

    public NeLivePlayerListenerApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }

    static MessageCodec<Object> getCodec() {
      return NeLivePlayerListenerApiCodec.INSTANCE;
    }

    public void onPrepared(String playerIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NeLivePlayerListenerApi.onPrepared", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg)),
          channelReply -> {
            callback.reply(null);
          });
    }

    public void onCompletion(String playerIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger,
              "dev.flutter.pigeon.NeLivePlayerListenerApi.onCompletion",
              getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg)),
          channelReply -> {
            callback.reply(null);
          });
    }

    public void onError(String playerIdArg, Long whatArg, Long extraArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NeLivePlayerListenerApi.onError", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg, whatArg, extraArg)),
          channelReply -> {
            callback.reply(null);
          });
    }

    public void onVideoSizeChanged(
        String playerIdArg, Long widthArg, Long heightArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger,
              "dev.flutter.pigeon.NeLivePlayerListenerApi.onVideoSizeChanged",
              getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg, widthArg, heightArg)),
          channelReply -> {
            callback.reply(null);
          });
    }

    public void onReleased(String playerIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NeLivePlayerListenerApi.onReleased", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg)),
          channelReply -> {
            callback.reply(null);
          });
    }

    public void onFirstVideoDisplay(String playerIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger,
              "dev.flutter.pigeon.NeLivePlayerListenerApi.onFirstVideoDisplay",
              getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg)),
          channelReply -> {
            callback.reply(null);
          });
    }

    public void onFirstAudioDisplay(String playerIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger,
              "dev.flutter.pigeon.NeLivePlayerListenerApi.onFirstAudioDisplay",
              getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg)),
          channelReply -> {
            callback.reply(null);
          });
    }

    public void onLoadStateChange(
        String playerIdArg, Long stateArg, Long extraArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger,
              "dev.flutter.pigeon.NeLivePlayerListenerApi.onLoadStateChange",
              getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(playerIdArg, stateArg, extraArg)),
          channelReply -> {
            callback.reply(null);
          });
    }
  }

  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put(
        "details",
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
