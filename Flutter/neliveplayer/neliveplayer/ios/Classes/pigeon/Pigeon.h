// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class FLTNeLiveConfig;
@class FLTNEAutoRetryConfig;

@interface FLTNeLiveConfig : NSObject
+ (instancetype)makeWithIsCloseTimeOutProtect:(nullable NSNumber *)isCloseTimeOutProtect
                       refreshPreLoadDuration:(nullable NSNumber *)refreshPreLoadDuration
                                  thirdUserId:(nullable NSString *)thirdUserId;
@property(nonatomic, strong, nullable) NSNumber *isCloseTimeOutProtect;
@property(nonatomic, strong, nullable) NSNumber *refreshPreLoadDuration;
@property(nonatomic, copy, nullable) NSString *thirdUserId;
@end

@interface FLTNEAutoRetryConfig : NSObject
+ (instancetype)makeWithCount:(nullable NSNumber *)count
                 delayDefault:(nullable NSNumber *)delayDefault
                   delayArray:(nullable NSArray<NSNumber *> *)delayArray;
@property(nonatomic, strong, nullable) NSNumber *count;
@property(nonatomic, strong, nullable) NSNumber *delayDefault;
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *delayArray;
@end

/// The codec used by FLTNeLivePlayerApi.
NSObject<FlutterMessageCodec> *FLTNeLivePlayerApiGetCodec(void);

@protocol FLTNeLivePlayerApi
/// @return `nil` only when `error != nil`.
- (void)initAndroidConfig:(FLTNeLiveConfig *)config error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)createWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)releasePlayerId:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setShouldAutoplayPlayerId:(NSString *)playerId
                       isAutoplay:(NSNumber *)isAutoplay
                            error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)setPlayUrlPlayerId:(NSString *)playerId
                                     path:(NSString *)path
                                    error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)prepareAsyncPlayerId:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)startPlayerId:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)stopPlayerId:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getCurrentPositionPlayerId:(NSString *)playerId
                                            error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)switchContentUrlPlayerId:(NSString *)playerId
                             url:(NSString *)url
                           error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getVersionWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)addPreloadUrlsUrls:(NSArray<NSString *> *)urls
                     error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)removePreloadUrlsUrls:(NSArray<NSString *> *)urls
                        error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, NSNumber *> *)queryPreloadUrlsWithError:
    (FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setBufferStrategyPlayerId:(NSString *)playerId
                   bufferStrategy:(NSNumber *)bufferStrategy
                            error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setHardwareDecoderPlayerId:(NSString *)playerId
                            isOpen:(NSNumber *)isOpen
                             error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setPlaybackTimeoutPlayerId:(NSString *)playerId
                           timeout:(NSNumber *)timeout
                             error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setAutoRetryConfigPlayerId:(NSString *)playerId
                            config:(FLTNEAutoRetryConfig *)config
                             error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setMutePlayerId:(NSString *)playerId
                 isMute:(NSNumber *)isMute
                  error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setVolumePlayerId:(NSString *)playerId
                   volume:(NSNumber *)volume
                    error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)setPreloadResultValidityIosValidity:(NSNumber *)validity
                                      error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTNeLivePlayerApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                                    NSObject<FLTNeLivePlayerApi> *_Nullable api);

/// The codec used by FLTNeLivePlayerListenerApi.
NSObject<FlutterMessageCodec> *FLTNeLivePlayerListenerApiGetCodec(void);

@interface FLTNeLivePlayerListenerApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onPreparedPlayerId:(NSString *)playerId completion:(void (^)(NSError *_Nullable))completion;
- (void)onCompletionPlayerId:(NSString *)playerId
                  completion:(void (^)(NSError *_Nullable))completion;
- (void)onErrorPlayerId:(NSString *)playerId
                   what:(NSNumber *)what
                  extra:(NSNumber *)extra
             completion:(void (^)(NSError *_Nullable))completion;
- (void)onVideoSizeChangedPlayerId:(NSString *)playerId
                             width:(NSNumber *)width
                            height:(NSNumber *)height
                        completion:(void (^)(NSError *_Nullable))completion;
- (void)onReleasedPlayerId:(NSString *)playerId completion:(void (^)(NSError *_Nullable))completion;
- (void)onFirstVideoDisplayPlayerId:(NSString *)playerId
                         completion:(void (^)(NSError *_Nullable))completion;
- (void)onFirstAudioDisplayPlayerId:(NSString *)playerId
                         completion:(void (^)(NSError *_Nullable))completion;
- (void)onLoadStateChangePlayerId:(NSString *)playerId
                            state:(NSNumber *)state
                            extra:(NSNumber *)extra
                       completion:(void (^)(NSError *_Nullable))completion;
@end
NS_ASSUME_NONNULL_END
