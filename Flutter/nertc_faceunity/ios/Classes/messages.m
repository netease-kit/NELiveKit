// Copyright (c) 2022 NetEase, Inc. All rights reserved.
// Use of this source code is governed by a MIT license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
      @"code" : (error.code ? error.code : [NSNull null]),
      @"message" : (error.message ? error.message : [NSNull null]),
      @"details" : (error.details ? error.details : [NSNull null]),
    };
  }
  return @{
    @"result" : (result ? result : [NSNull null]),
    @"error" : errorDict,
  };
}

@interface NECreateFaceUnityRequest ()
+ (NECreateFaceUnityRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface NEFUInt ()
+ (NEFUInt *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface NEFUDouble ()
+ (NEFUDouble *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface NEFUString ()
+ (NEFUString *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface SetFaceUnityParamsRequest ()
+ (SetFaceUnityParamsRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation NECreateFaceUnityRequest
+ (NECreateFaceUnityRequest *)fromMap:(NSDictionary *)dict {
  NECreateFaceUnityRequest *result = [[NECreateFaceUnityRequest alloc] init];
  result.beautyKey = dict[@"beautyKey"];
  if ((NSNull *)result.beautyKey == [NSNull null]) {
    result.beautyKey = nil;
  }
  result.logDir = dict[@"logDir"];
  if ((NSNull *)result.logDir == [NSNull null]) {
    result.logDir = nil;
  }
  result.logLevel = dict[@"logLevel"];
  if ((NSNull *)result.logLevel == [NSNull null]) {
    result.logLevel = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.beautyKey ? self.beautyKey : [NSNull null]), @"beautyKey",
                                   (self.logDir ? self.logDir : [NSNull null]), @"logDir",
                                   (self.logLevel ? self.logLevel : [NSNull null]), @"logLevel",
                                   nil];
}
@end

@implementation NEFUInt
+ (NEFUInt *)fromMap:(NSDictionary *)dict {
  NEFUInt *result = [[NEFUInt alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation NEFUDouble
+ (NEFUDouble *)fromMap:(NSDictionary *)dict {
  NEFUDouble *result = [[NEFUDouble alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation NEFUString
+ (NEFUString *)fromMap:(NSDictionary *)dict {
  NEFUString *result = [[NEFUString alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation SetFaceUnityParamsRequest
+ (SetFaceUnityParamsRequest *)fromMap:(NSDictionary *)dict {
  SetFaceUnityParamsRequest *result = [[SetFaceUnityParamsRequest alloc] init];
  result.filterLevel = dict[@"filterLevel"];
  if ((NSNull *)result.filterLevel == [NSNull null]) {
    result.filterLevel = nil;
  }
  result.colorLevel = dict[@"colorLevel"];
  if ((NSNull *)result.colorLevel == [NSNull null]) {
    result.colorLevel = nil;
  }
  result.redLevel = dict[@"redLevel"];
  if ((NSNull *)result.redLevel == [NSNull null]) {
    result.redLevel = nil;
  }
  result.blurLevel = dict[@"blurLevel"];
  if ((NSNull *)result.blurLevel == [NSNull null]) {
    result.blurLevel = nil;
  }
  result.eyeBright = dict[@"eyeBright"];
  if ((NSNull *)result.eyeBright == [NSNull null]) {
    result.eyeBright = nil;
  }
  result.eyeEnlarging = dict[@"eyeEnlarging"];
  if ((NSNull *)result.eyeEnlarging == [NSNull null]) {
    result.eyeEnlarging = nil;
  }
  result.cheekThinning = dict[@"cheekThinning"];
  if ((NSNull *)result.cheekThinning == [NSNull null]) {
    result.cheekThinning = nil;
  }
  result.filterName = dict[@"filterName"];
  if ((NSNull *)result.filterName == [NSNull null]) {
    result.filterName = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.filterLevel ? self.filterLevel : [NSNull null]),
                                   @"filterLevel",
                                   (self.colorLevel ? self.colorLevel : [NSNull null]),
                                   @"colorLevel", (self.redLevel ? self.redLevel : [NSNull null]),
                                   @"redLevel", (self.blurLevel ? self.blurLevel : [NSNull null]),
                                   @"blurLevel", (self.eyeBright ? self.eyeBright : [NSNull null]),
                                   @"eyeBright",
                                   (self.eyeEnlarging ? self.eyeEnlarging : [NSNull null]),
                                   @"eyeEnlarging",
                                   (self.cheekThinning ? self.cheekThinning : [NSNull null]),
                                   @"cheekThinning",
                                   (self.filterName ? self.filterName : [NSNull null]),
                                   @"filterName", nil];
}
@end

void NEFTFaceUnityEngineApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                                 id<NEFTFaceUnityEngineApi> api) {
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.create"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NECreateFaceUnityRequest *input = [NECreateFaceUnityRequest fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api create:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setFilterLevel"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUDouble *input = [NEFUDouble fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setFilterLevel:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setFilterName"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUString *input = [NEFUString fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setFilterName:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setColorLevel"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUDouble *input = [NEFUDouble fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setColorLevel:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setRedLevel"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUDouble *input = [NEFUDouble fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setRedLevel:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setBlurLevel"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUDouble *input = [NEFUDouble fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setBlurLevel:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setEyeEnlarging"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUDouble *input = [NEFUDouble fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setEyeEnlarging:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setCheekThinning"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUDouble *input = [NEFUDouble fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setCheekThinning:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setEyeBright"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFUDouble *input = [NEFUDouble fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setEyeBright:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.setMultiFUParams"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        SetFaceUnityParamsRequest *input = [SetFaceUnityParamsRequest fromMap:message];
        FlutterError *error;
        NEFUInt *output = [api setMultiFUParams:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NEFTFaceUnityEngineApi.release"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFUInt *output = [api release:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
